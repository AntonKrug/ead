package main

import (
	"flag"
	"github.com/logrusorgru/aurora"
	"io/ioutil"
	"log"
	"os"
)

var colorsFlag = flag.Bool("colors", false, "enable logger's colors (disabled by default)")
var outputAuxiliaryFlag = flag.Bool("output_uxiliary", true, "output miscalenialous supporting files, not just raw data")
var sourceDirFlag = flag.String("source", "", "source directory where the binary files will be fetch from (by default it's the current working directory"+SLASHES_HELP+")")
var outputDirFlag = flag.String("output", "", "output directory where the C and H files will be saved to (by default it's the parent directory of the sourceDir"+SLASHES_HELP+")")
var outputContainerFlag = flag.String("output_container", "data_root_include", "Under what container folder inside the output directory will the data-only part be stored")
var customCopyrightFlag = flag.String("copyright", "", "path to your own copyright notice file (by default Microchip's copyright is used)")
var hexDumpFoarmatingFlag = flag.Bool("hexdump_format", true, "Should be the hex dump be formated into chucks of 4 bytes")
var includePrefixFlag = flag.String("include_prefix", "embedded_autogenerated_data/", "prefix added to the path in the include statements")

var sourceDir string
var outputDir string

var au aurora.Aurora

func init() {
	versionFlag := flag.Bool("v", false, "prints current version")
	quietFlag := flag.Bool("quiet", false, "do not print log messages (by default logger is noisy)")

	flag.Parse()

	au = aurora.NewAurora(*colorsFlag)

	log.SetOutput(os.Stdout)
	log.SetFlags(log.Ldate | log.Ltime)

	if *versionFlag {
		log.Println("EAD tool version", au.Bold(EAD_VERSION))
		os.Exit(0)
	}

	if *quietFlag {
		log.SetOutput(ioutil.Discard)
		log.SetFlags(0)
	}
}
